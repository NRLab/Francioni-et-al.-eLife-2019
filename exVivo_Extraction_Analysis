%% Paramaters
close all;
clear all;

imageLength_sec = 6; %total duration of imaging (sec)
baselineLength_sec = 1; %total duration of baseline (sec)
nStim_trace = 10;
downSampleTo_hz = 20; %frequency to down sample
    desiredImageLength_frames = imageLength_sec*downSampleTo_hz;
    baselineLength_frames = downSampleTo_hz*baselineLength_sec;
startFrame_peak = 20; %where to find peak (in frames)
endFrame_peak = 60; %where to find peak (in frames)
%% Extraction & Analysis
%this extracts peak of calcium traces and stores it in the variable 'peak'
%which can be outputted for further analysis if desired

%navigates to experimental folder
parentFile = 'D:\Data\Rochefort Lab\Experiments\Valerio - Ex vivo GCaMP6 callibration\6s';
expName = '20191004_c3';
expFile = fullfile(parentFile,expName);

%get files from directory
dir_info = dir(expFile);
dir_info([dir_info.isdir]|~[dir_info.bytes]) = [];
nFiles = length(dir_info);

%load metadata (stored in excel sheet)
metadata_fileIdx = find(contains({dir_info.name},'xls'),1,'first');
metadata_filename = fullfile(expFile,dir_info(metadata_fileIdx).name);
[metadataNum,metadataChar] = xlsread(metadata_filename);
nTiffs = length(metadataNum);

%get roi zip ids
    roiMask_filesIdx = contains({dir_info.name},'zip');
    roiMask_fileName = {dir_info(roiMask_filesIdx).name};
    nRoiFiles = length(roiMask_fileName);
    roiZip_fileIDs = nan(nRoiFiles,1);
    for iRoiFile = 1:nRoiFiles
     x = roiMask_fileName{iRoiFile};
     roiZip_fileIDs(iRoiFile) = str2num([num2str(str2num(x(1))), num2str(str2num(x(2))), num2str(str2num(x(3)))]);
    end

%get tiffNames
tiff_fileIdx = contains({dir_info.name},'pmtUG.tiff');
tiffNames = {dir_info(tiff_fileIdx).name};

%load and analyze tiffStacks one by one
peak = nan(nTiffs,1);
basalF = nan(nTiffs,1);
cell_sumF_downSampled = nan(desiredImageLength_frames,nTiffs);
bck_sumF_downSampled = nan(desiredImageLength_frames,nTiffs);
cell_sumF_subtracted = nan(desiredImageLength_frames,nTiffs);
for iTiff = 1:nTiffs
    clear tiffStack;
    currentTiff_ID = metadataNum(iTiff,1);
    currentTiff_name = ['F' char(string(currentTiff_ID)) '_pmtUG.tiff']
    stimFreq_trial = metadataNum(iTiff,3);
    %Load tiff stack
    try
        for i = 1:10000
            imageData = imread(fullfile(expFile,currentTiff_name),i);
            tiffStack(:,:,i) = double(imageData);
            % figure(1); imagesc(imageData); pause()
        end
    end
    [imageSizeY, imageSizeX, nImages] = size(tiffStack);
    
    
    % Get roi masks (there will be 2, one for the target roi (ie cell) one for the
    % background)
    roiZip_toUse = find(roiZip_fileIDs<=metadataNum(iTiff,1),1,'last');
    [sROI]= ReadImageJROI(fullfile(expFile,[char(string(roiZip_fileIDs(roiZip_toUse))) '.zip']));
    
    cellMaskCoordinates = sROI{1}.mnCoordinates; %in x/y coordinates
    cellMask=poly2mask(cellMaskCoordinates(:,1),cellMaskCoordinates(:,2),imageSizeY,imageSizeX);
    cellMask = repmat(cellMask,1,1,nImages);

    bckMaskCoordinates = sROI{2}.mnCoordinates; %in x/y coordinates
    bckMask=poly2mask(bckMaskCoordinates(:,1),bckMaskCoordinates(:,2),imageSizeY,imageSizeX);
    bckMask = repmat(bckMask,1,1,nImages);
    
    % Calculate sumF (fluorescence across all pixels)
    cell_sumF = cellMask.*tiffStack;
    cell_sumF = squeeze(nansum(nansum(cell_sumF,1),2))./sum(sum(cellMask(:,:,1)));
    
    bck_sumF = bckMask.*tiffStack;
    bck_sumF = squeeze(nansum(nansum(bck_sumF,1),2))./sum(sum(bckMask(:,:,1)));
    
    % Downsample trace
    imageFreq = nImages/imageLength_sec;
    
    OrigVec = [1:nImages];                       % Vector
    DownSampledIdx = linspace(1, nImages, desiredImageLength_frames+1);    % Interpolation Vector
 
    for i = 10:desiredImageLength_frames %ignore first 2 frames as laser is off
        cell_sumF_downSampled(i,iTiff) = nanmean(cell_sumF(floor(DownSampledIdx(i)):floor(DownSampledIdx(i+1))));
        bck_sumF_downSampled(i,iTiff)= nanmean(bck_sumF(floor(DownSampledIdx(i)):floor(DownSampledIdx(i+1))));
    end

    %fit background to regression to account for background drift and
    %subtract fit
    v=[10:desiredImageLength_frames]';
    m = polyfit(v,bck_sumF_downSampled(10:end,iTiff),1);
    basalF(iTiff) =  nanmean(cell_sumF_downSampled(10:20,iTiff));%-nanmean(bck_sumF_downSampled(10:20,iTiff)); 
    
    scaled_m = m*(nanmean(cell_sumF_downSampled(10:20,iTiff))/m(2)); %scALING UP BCK TO CELL
    cell_sumF_subtracted(10:end,iTiff) =cell_sumF_downSampled(10:end,iTiff)-(scaled_m(1)*v+scaled_m(2));
    
end   
    
%calculate deltaF/F for trace
    cell_dF = cell_sumF_subtracted./repmat(basalF,1,desiredImageLength_frames)'; %this is a vector for all tiffs in the experiment

%calculate peak from dF based on predefined start and end frames
    peak = max(cell_dF(startFrame_peak:endFrame_peak,:))'; %this is a vector for all tiffs in the experiment

%stores peaks in metadata excel file for further analysis (ie averaging and plotting) 
   if writeExcel
   xlswrite(metadata_filename,peak,1,"E");
   end   
    
